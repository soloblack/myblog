<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>RSS feed title</title>
        <link>Homepage link</link>
        <description>RSS feed description</description>
        <lastBuildDate>Thu, 16 Oct 2014 20:54:34 +0800</lastBuildDate>
        <language>zh-cn</language>
        
        <item>
            <title>最近笔试遇到的一些问题</title>
            <link>Homepage link/articles/work-exam.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/work-exam.html</guid>
            <author>thesoloblack@gmail.com SoLoBlack</author>
            <pubDate>Sun, 12 Oct 2014 00:00:00 +0800</pubDate>
            <description>&lt;hr&gt;
&lt;p&gt;&lt;!-- toc --&gt;&lt;/p&gt;
&lt;h2 id=&quot;第一题&quot;&gt;第一题&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;描述&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这道题是10月11日京东笔试的笔试题
具体描述记不太清了，大概是这样的：给一个数n，输出一个最小的数m，使得m的各个位的乘积等于n。
例如: 输入36，输出49；输入100，输出455&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;关键字：最小&lt;br&gt;拿到题之后我自己在草稿纸上画图分析，当时画了这样一个图&lt;br&gt;&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/48d6ddd3b0f29a444df540cb94871a07.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;br&gt;感觉这样就把所有的情况列举了出来，然后一步步算把最小的记录下来就行。&lt;br&gt;事实上这种方法是可以得到正确结果的，但明显是非常暴力的。&lt;br&gt;由于时间关系当时在卷子上实现的程序就是按照这个想法去写的。  &lt;/p&gt;
&lt;p&gt;但是我回到家里越想越不对。明显这么做是一分都拿不到的。。。&lt;br&gt;仔细阅读了题目之后，发现题目要求的最小会是一个突破口。&lt;br&gt;于是有了下面的想法&lt;br&gt;divider从9开始，一直到1，看n能不能整除divider，如果能整除了，将rs的最低位写为divider，进行下一轮，如果某一轮divider到了1，返回-1。每次n=n/divider，直到n小于10。&lt;br&gt;比如126，&lt;br&gt;第一轮divider为9，有n=126/9=14  rs=9&lt;br&gt;第二轮divider为7，有n=14/7=2    rs=79&lt;br&gt;n已经小于10了，rs=279&lt;br&gt;目前来讲我认为这么做是最优的，如果各位有更好的方法欢迎交流。  &lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-c++&quot;&gt;#include &lt;iostream&gt;
using namespace std;
int func(int n){
    cout&lt;&lt;”call func “&lt;&lt;n&lt;&lt;endl;
    if(n&gt;=1&amp;&amp;n&lt;=9) 
        return n;
    int result=0;
    int tmp=0;
    int flag=0;
    for(int i=9;i&gt;=2;i--){
        if(n%i==0){
            flag=1;
            tmp=n/i;
            if(tmp==1){
                result=i;
                break;
            }
            else{
                result=func(tmp)*10+i;
                break;
            }
        }       
    }
    if(flag&amp;&amp;result&gt;0)
        return result;
    else 
        return -1;
}
int main(){
    cout&lt;&lt;func(36);
    return 0; 
}
&lt;/pre&gt;
&lt;h2 id=&quot;第二题&quot;&gt;第二题&lt;/h2&gt;
&lt;h3 id=&quot;描述&quot;&gt;描述&lt;/h3&gt;
&lt;p&gt;给定一个数组a[N]，我们希望构造数组b[N]，其中b[i]=a[0]*a[1]*...*a[N-1]/a[i]。&lt;br&gt;在构造过程中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不允许使用除法；&lt;br&gt;要求O(1)的空间复杂度和O(n)的时间复杂度；&lt;br&gt;除去遍历计数器与a[N]、b[N]外，不可使用新的变量（包括但不限于栈临时变量、堆空间和全局静态变量等）&lt;br&gt;本题来自新浪微博&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;
&lt;p&gt;乍一看这个题没有什么难的，可是在笔试过程中我足足想了大概20分钟。&lt;br&gt;拿到题目分析得出&lt;br&gt;b[0] = a[0]^0 * a[1]^1 * a[2] *...a[N-1]^1;&lt;br&gt;b[1] = a[0]^1 * a[1]^0 * a[2] *...a[N-1]^1;&lt;br&gt;......&lt;br&gt;b[N-1] = a[0]^1 * a[1]^1 * a[2] *...a[N-1]^0;&lt;br&gt;若N=8,由此可得矩阵&lt;br&gt;$$
\begin{matrix}
0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1\\
1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1\\
1 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0\\
\end{matrix}
$$
根据题目要求，空间复杂度O(1)，时间复杂度O(N)&lt;br&gt;以0为分割线看这个矩阵可以分析得出&lt;br&gt;（注:b_left为0左边的值 b_right为0右边的值 并且b_left[]和b_[]right初始化为1）&lt;br&gt;b_left[1]    = b_left[0] * a[0] * b_right[1];&lt;br&gt;b_right[N-2] = b_right[N-1] * a_[N-1] * b_left[N-2];&lt;br&gt;...&lt;br&gt;b_left[N-1]    = b_left[N-2] * a[N-2] * b_right[N-1];&lt;br&gt;b_right[0] = b_right[1] * a_[1] * b_left[0];&lt;br&gt;进行到这里就发现了。我们需要一个大小为n的空间啊&lt;br&gt;可是题目不让啊。。。这怎么办呢。。。&lt;br&gt;我在考试的时候那个版本是错的，现在这个马上就要展示的版本是我好基友想出来的。&lt;br&gt;计算的思想和上边讲的一样&lt;br&gt;只不过在空间的利用上巧妙了一些。说白了就是看破了对角线这两个&lt;br&gt;b_left[0]=a[0]^0&lt;br&gt;b_right[N-1]=a[N-1]^0&lt;br&gt;这两个值永远是1&lt;br&gt;所以我们可以利用他们的空间，随便用上一个这个问题就解决了&lt;br&gt;Talk is cheap , show you the code&lt;br&gt;最后唠叨一下。我觉得这题这么出真的没啥意义。  &lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;实现&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-c++&quot;&gt;#include &lt;iostream&gt;
#define length 8
using namespace std;
int main(){
    int N=length;
    int a[length]={
        1,2,3,4,5,6,7,8
    };
    int b[length];
    for(int i = 0;i&lt;length;i++){
        b[i]=1;
    }
    for(int i=length-2;i&gt;=0;i--){
        b[i]=b[i+1]*a[i+1];
    }
    for(int i=1;i&lt;length-1;i++){
        a[i]=a[i-1]*a[i];
    }
    for(int i=length-1;i&gt;0;i--){
        a[i]=a[i-1];
    }
    a[0]=1; //这里利用的是 b\_left\[0\]=a\[0\]^0
    for(int i=0;i&lt;length;i++){
        cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;a[i]&lt;&lt;&quot; &quot;&lt;&lt;b[i]&lt;&lt;&quot; &quot;&lt;&lt;a[i]*b[i]&lt;&lt;endl;
    }
}
&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>PHP连接Mysql类文件</title>
            <link>Homepage link/articles/mysqllib-php.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/mysqllib-php.html</guid>
            <author>thesoloblack@gmail.com SoLoBlack</author>
            <pubDate>Thu, 09 Oct 2014 00:00:00 +0800</pubDate>
            <description>&lt;h1 id=&quot;php连接mysql类文件&quot;&gt;PHP连接Mysql类文件&lt;/h1&gt;
&lt;hr&gt;
&lt;pre class=&quot;prettyprint linenums lang-PHP&quot;&gt;&lt;?php
class mysql
{
    private $db_servername;
    private $db_username;
    private $db_password;
    private $db_database;
    private $db_coding;
    private $db_showerror;
    private $db_pconn;
    function __construct($servername, $username, $password, $database, $coding, $showerror, $pconn) {
        $this-&gt;db_servername = $servername;
        $this-&gt;db_username = $username;
        $this-&gt;db_password = $password;
        $this-&gt;db_database = $database;
        $this-&gt;db_coding = $coding;
        $this-&gt;db_showerror = $showerror;
        $this-&gt;db_pconn = $pconn;
        if (!$this-&gt;showerror) {
            error_reporting(0);
        }
        $this-&gt;connect();
    }
    function connect() {
        if ($this-&gt;pconn) {
            $this-&gt;conn = mysql_pconnect($this-&gt;db_servername, $this-&gt;db_username, $this-&gt;db_password);
        } else {
            $this-&gt;conn = mysql_connect($this-&gt;db_servername, $this-&gt;db_username, $this-&gt;db_password);
        }
        mysql_select_db($this-&gt;db_database, $this-&gt;conn) or die($this-&gt;error());
        mysql_query(“SET NAME $this-&gt;db_coding”);
    }
    function search($table, $where) {
        $this-&gt;sql = “SELECT * FROM ‘$table’ $where”;
        return $this-&gt;query($this-&gt;sql);
    }
    function fetch($sql) {
        $this-&gt;result = mysql_fetch_array($sql);
        return $this-&gt;result;
    }
    function insert($table, $field, $value) {
        $this-&gt;sql = “INSERT INTO ‘$this-&gt;database’.’$table’ ($field) VALUES($value);”;
        return $this-&gt;query($this-&gt;sql);
    }
    function update($table, $field, $value, $where) {
        $this-&gt;sql = “UPDATE ‘$this-&gt;database’.’$table’ SET ‘$field’ = ‘$value’ $where;”;
        return $this-&gt;query($this-&gt;sql);
    }
    function delete($table, $where) {
        $this-&gt;sql = “DELETE FROM ‘$this-&gt;database’.’$table’ $where;”;
        return $this-&gt;query($this-&gt;sql);
    }
    function query($sql) {
        $this-&gt;query = mysql_query($this-&gt;sql, $this-&gt;conn) or die($this-&gt;error());
        return $this-&gt;query;
    }
    function num($sql) {
        $this-&gt;query = $this-&gt;query($this-&gt;search($table, ‘’));
        $this-&gt;num = mysql_num_rows($this-&gt;query);
        return $this-&gt;num;
    }
    function error($value = ‘’) {
        if ($this-&gt;db_showerror) {
            echo “&lt;br&gt;Error&lt;br /&gt;”;
            echo mysql_error() . “&lt;br /&gt;”;
            echo $value;
        }
    }
    function check($sql) {
        $check = eregi(‘select|insert|update|delete|\’|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile’, $sql);
        if ($check) {
            exit();
        } else {
            return htmlspecialchars($sql, ENT_QUOTES);
        }
    }
    function __destruct() {
        if (!empty($this-&gt;result)) {
            mysql_free_result($this-&gt;result) or die($this-&gt;error(‘为节省系统资源数据库已被程序自动关闭,请不要重复连接数据库,或者将连接模式改为永久连接’));
        }
        mysql_close($this-&gt;conn);
    }
}
?&gt;
&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>iComet代码粗解(1)</title>
            <link>Homepage link/articles/icomet-part1.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/icomet-part1.html</guid>
            <author>thesoloblack@gmail.com SoLoBlack</author>
            <pubDate>Mon, 29 Sep 2014 00:00:00 +0800</pubDate>
            <description>&lt;h1 id=&quot;icomet代码粗解（1）&quot;&gt;iComet代码粗解（1）&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;!-- toc --&gt;&lt;/p&gt;
&lt;h2 id=&quot;初识icomet&quot;&gt;初识iComet&lt;/h2&gt;
&lt;p&gt;iComet 是一个使用 C++ 语言开发的支持百万并发连接的 comet/push 服务器, 支持百万级并发连接, 内存占用少, 性能优越. 可用于移动 App 的 Push Server(消息推送服务器), 或者用于 Web Push(Web 服务器推). 用于 Web Push 时, 支持的浏览器和操作系统平台包括: Safari(iOS, Mac), Firefox/Chrome(Windows, Mac), IE6+
&lt;a href=&quot;http://www.ideawu.net/blog/icomet&quot;&gt;iComet项目主页&lt;/a&gt;，&lt;a href=&quot;https://github.com/ideawu/icomet&quot;&gt;GitHub地址&lt;/a&gt;，在此感谢iComet的&lt;a href=&quot;http://weibo.com/ideawu&quot;&gt;作者ideawu&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;推荐各位在阅读以下内容之前看一下原作者之前的两篇Blog：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ideawu.net/blog/archives/740.html&quot;&gt;构建C1000K的服务器(1) – 基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ideawu.net/blog/archives/742.html&quot;&gt;构建C1000K的服务器(2) – 实现百万连接的comet服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在阅读完两篇blog之后让我们先粗略的了解一下整个代码。&lt;/p&gt;
&lt;h3 id=&quot;subscriberh-amp-subscribercpp&quot;&gt;subscriber.h &amp; subscriber.cpp&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;订阅者&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;channelh-amp-channelcpp&quot;&gt;channel.h &amp; channel.cpp&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通道，subscriber可以订阅通道，通道中有消息就会发过来&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;serverh-amp-servercpp&quot;&gt;server.h &amp; server.cpp&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;server有多种连接策略，poll，iframe，stream&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;presenceh&quot;&gt;Presence.h&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;相应的presence.cpp在另一个文件夹中，而现有的comet-server中已经整合了之前的功能，presence是一个特殊的订阅者（我是这么理解的），它订阅所有channel的存在情况（用在IM上就可以理解为在线状态）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;comet-servercpp&quot;&gt;comet-server.cpp&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;comet-server最终实现版本，暂且这里就列个TODO吧，理解不够深有点讲不清楚&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;icomet结构-amp-api&quot;&gt;iComet结构 &amp; API&lt;/h2&gt;
&lt;h3 id=&quot;结构&quot;&gt;结构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/776c88e46f39991731106860e78dd268.png&quot; alt=&quot;iComet大致结构&quot;&gt;&lt;/p&gt;
&lt;p&gt;每个Subscriber订阅一个Channel，每个Channel里有它的订阅者的链表。每个Channel被一个Server控制。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>小猪IM整体架构及实现(1)</title>
            <link>Homepage link/articles/xiaozhu-im-part1.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>Homepage link/articles/xiaozhu-im-part1.html</guid>
            <author>thesoloblack@gmail.com SoLoBlack</author>
            <pubDate>Mon, 29 Sep 2014 00:00:00 +0800</pubDate>
            <description>&lt;h1 id=&quot;小猪短租im整体架构及实现&quot;&gt;小猪短租IM整体架构及实现&lt;/h1&gt;
&lt;hr&gt;
&lt;!-- toc --&gt;

&lt;h2 id=&quot;im现状及需求&quot;&gt;IM现状及需求&lt;/h2&gt;
&lt;p&gt;网站业务逻辑复杂，面对即将上线的IOS,Android的房东以及房客客户端，IM Server将面临巨大的压力，所以需要对现有IM架构进行调整。&lt;/p&gt;
&lt;h3 id=&quot;im现状&quot;&gt;IM现状&lt;/h3&gt;
&lt;p&gt;IM现状有两个Server：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;与无线端通信使用开源的&lt;a href=&quot;http://zh.wikipedia.org/wiki/XMPP&quot;&gt;XMPP协议&lt;/a&gt;使用XMPP Server&lt;/li&gt;
&lt;li&gt;与WebIM端和HTML5端使用JSON数据格式进行通讯，使用&lt;a href=&quot;http://en.wikipedia.org/wiki/Push_technology&quot;&gt;Pushlets&lt;/a&gt;，开源地址&lt;a href=&quot;http://www.pushlets.com/&quot;&gt;Pushlets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个Server之间还需要互相通信&lt;/p&gt;
&lt;h3 id=&quot;im需求&quot;&gt;IM需求&lt;/h3&gt;
&lt;h4 id=&quot;业务需求&quot;&gt;业务需求&lt;/h4&gt;
&lt;p&gt;目前来讲消息来源主要有6个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;WebIM&lt;/li&gt;
&lt;li&gt;HTML5 IM&lt;/li&gt;
&lt;li&gt;IOS房东客户端&lt;/li&gt;
&lt;li&gt;IOS房客客户端&lt;/li&gt;
&lt;li&gt;Android房东客户端&lt;/li&gt;
&lt;li&gt;Android房客客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;消息的类型主要有3种:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;提醒&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;心跳 (heartbeat)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;性能需求&quot;&gt;性能需求&lt;/h4&gt;
&lt;p&gt;现状日均消息量1w+，并发量不高，但是为了以后扩展方便，需要解决高并发的问题，并且使新的服务器支持分布式。&lt;a href=&quot;http://www.ideawu.net/blog/tag/c1000k&quot;&gt;C1000K问题&lt;/a&gt;
需要无阻塞的通信框架，对于IO操作需要谨慎。&lt;/p&gt;
&lt;h2 id=&quot;im架构&quot;&gt;IM架构&lt;/h2&gt;
&lt;h3 id=&quot;业界案例&quot;&gt;业界案例&lt;/h3&gt;
&lt;p&gt;参考几个大网站的架构，例如Facebook、淘宝、赶集、陌陌等&lt;/p&gt;
&lt;p&gt;FaceBook IM架构
&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/2e778b0b5e475a601538405d4ff4192b.png&quot; alt=&quot;FaceBook IM&quot;&gt;&lt;/p&gt;
&lt;p&gt;淘宝 IM架构
&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/9bc6a8296234d35568075839eafc6fa7.png&quot; alt=&quot;淘宝IM架构&quot;&gt;&lt;/p&gt;
&lt;p&gt;赶集 IM架构
&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/80929ad6e0db38e08b37878cbb182ee6.png&quot; alt=&quot;赶集IM架构&quot;&gt;&lt;/p&gt;
&lt;p&gt;陌陌 IM架构
&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/b5297a8901fce67dce42d4e88dea685e.png&quot; alt=&quot;陌陌IM架构&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;本次修改&quot;&gt;本次修改&lt;/h3&gt;
&lt;p&gt;小猪新老架构，橙色为新的架构（还未完全设计完成，涉及业务逻辑比较复杂，所以需要对现有版本做兼容）
&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/b5b58cf1432c1ddc1f5c13d853450386.png&quot; alt=&quot;小猪新老架构&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;具体实现&quot;&gt;具体实现&lt;/h2&gt;
&lt;p&gt;Comet Server 使用了开源项目iComet进行二次开发，&lt;a href=&quot;http://www.ideawu.net/blog/icomet&quot;&gt;iComet项目主页&lt;/a&gt;，&lt;a href=&quot;https://github.com/ideawu/icomet&quot;&gt;GitHub地址&lt;/a&gt;
在此感谢iComet的&lt;a href=&quot;http://weibo.com/ideawu&quot;&gt;作者ideawu&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;介绍icomet&quot;&gt;介绍iComet&lt;/h3&gt;
&lt;p&gt;iComet 是一个使用 C++ 语言开发的支持百万并发连接的 comet/push 服务器, 支持百万级并发连接, 内存占用少, 性能优越. 可用于移动 App 的 Push Server(消息推送服务器), 或者用于 Web Push(Web 服务器推). 用于 Web Push 时, 支持的浏览器和操作系统平台包括: Safari(iOS, Mac), Firefox/Chrome(Windows, Mac), IE6+&lt;/p&gt;
&lt;h3 id=&quot;icomet的工作流程&quot;&gt;iComet的工作流程&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://soloimage-soloimage.stor.sinaapp.com/original/6e62787cf161ffb3ddfee69e78a4a589.png&quot; alt=&quot;iComet的工作流程&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;对于icomet二次开发的修改点&quot;&gt;对于iComet二次开发的修改点&lt;/h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对于在线状态的修改，iComet支持订阅在线状态，但是不符合业务需求&lt;/li&gt;
&lt;li&gt;对于好友关系的维护，预期是在Web Tier中用PHP实现，它的功能是维护好友关系并且把用户在线状态，好友关系状态都放到队列去，然后定期执行队列里的命令，放到数据库。&lt;/li&gt;
&lt;li&gt;对于离线消息，iComet放到内存里没有进行持久化，在改版中要进行持久化。&lt;/li&gt;
&lt;li&gt;对于消息的格式需要根据业务进行一定的修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
